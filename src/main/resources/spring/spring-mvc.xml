<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd  http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--spring mvc注解默认配置-->
    <context:component-scan base-package="org.kingszelda"/>
    <mvc:annotation-driven/>

    <bean id="calculateServiceV2" class="org.springframework.aop.framework.ProxyFactoryBean">
        <!-- 需要代理的接口 -->
        <property name="proxyInterfaces" value="org.kingszelda.version2.service.CalculateService"/>
        <!-- 被代理的实体 -->
        <property name="target">
            <bean class="org.kingszelda.version2.service.impl.CalculateServiceImpl"/>
        </property>
        <!-- 调用代理对象方法时的额外操作 -->
        <property name="interceptorNames">
            <!--这里的顺序对责任链顺序有直接影响，所以能合并的应当合并在一个过滤器中，本例都可以融合到middleInterceptor中-->
            <list>
                <value>middleInterceptor</value>
                <value>beforeAdvisor</value>
                <value>afterAdvisor</value>
            </list>
        </property>
    </bean>

    <!-- 业务前切点 -->
    <bean id="beforeAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
        <constructor-arg ref="calculateBeforeAdvice"/>
        <constructor-arg ref="pointcut"/>
    </bean>

    <!-- 返回前切点 -->
    <bean id="afterAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
        <constructor-arg ref="calculateAfterAdvice"/>
        <constructor-arg ref="pointcut"/>
    </bean>

    <!-- 环绕式切点，相对于before after throw,这是属于高一层设计，因为before等也是通过Interceptor实现的 -->
    <bean id="middleInterceptor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
        <constructor-arg ref="calculateMethodInterceptor"/>
        <constructor-arg ref="pointcut"/>
    </bean>

    <!-- 定义切点位置，只有满足正则的才拦截，如果不配置切点，则拦截所有接口方法 -->
    <bean id="pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut">
        <property name="pattern" value=".*add|.*sub"/>
    </bean>

</beans>